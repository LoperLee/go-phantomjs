package phantomjs

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_wrapper_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x8c, 0x54,
		0x4d, 0x6f, 0xda, 0x40, 0x10, 0xbd, 0xe7, 0x57, 0x4c, 0x7d, 0x88, 0x67,
		0x6b, 0xcb, 0x90, 0x6b, 0x68, 0x1a, 0x45, 0x2a, 0xad, 0xa8, 0x22, 0x2a,
		0x25, 0x69, 0x73, 0xc0, 0x44, 0x72, 0x61, 0x81, 0xad, 0x96, 0x35, 0xdd,
		0x5d, 0xe7, 0x43, 0x15, 0xff, 0xbd, 0xb3, 0xfe, 0x62, 0x29, 0x31, 0xe9,
		0x29, 0x59, 0xcf, 0x9b, 0x37, 0xef, 0xcd, 0x07, 0x8f, 0x99, 0x86, 0xa5,
		0xcc, 0x7f, 0x66, 0x12, 0x2e, 0xc0, 0xae, 0x84, 0x19, 0x9c, 0xe0, 0xa2,
		0x50, 0x33, 0x2b, 0x72, 0x85, 0x0c, 0xfe, 0x9c, 0x00, 0x38, 0x88, 0x79,
		0x31, 0x96, 0xaf, 0x09, 0xa2, 0xf9, 0xef, 0x42, 0x68, 0x8e, 0x61, 0xf5,
		0x25, 0x64, 0x83, 0x1a, 0x21, 0xe6, 0x14, 0xed, 0x0f, 0x4e, 0xe8, 0xd9,
		0xe4, 0xc3, 0x2c, 0xdb, 0xd8, 0x42, 0xf3, 0x91, 0xda, 0x14, 0xb6, 0x26,
		0xab, 0xc0, 0x52, 0x28, 0x6e, 0x08, 0x3f, 0x99, 0x0e, 0xca, 0x6f, 0x15,
		0x59, 0x62, 0xec, 0x3c, 0x2f, 0x6c, 0xf2, 0xa4, 0x85, 0xe5, 0xd7, 0x04,
		0xc1, 0x70, 0x72, 0x7f, 0x35, 0xba, 0x1b, 0x8d, 0xbf, 0x4c, 0xab, 0x42,
		0x75, 0x36, 0x65, 0xee, 0x32, 0x84, 0x4a, 0x34, 0xcf, 0xe6, 0x25, 0xbe,
		0x06, 0x3d, 0xad, 0x84, 0xe4, 0x80, 0x12, 0xde, 0x5d, 0x5c, 0x40, 0x38,
		0x1c, 0x7f, 0x0a, 0x9b, 0xe2, 0x50, 0x95, 0x4e, 0x36, 0x85, 0x59, 0xa1,
		0xac, 0xe1, 0xf0, 0x36, 0xe3, 0xb6, 0x2d, 0x3e, 0xcb, 0xd7, 0xeb, 0x4c,
		0x39, 0xb3, 0x15, 0x93, 0xd9, 0x48, 0x31, 0xe3, 0xd8, 0x8f, 0xe1, 0x8c,
		0x4d, 0xfa, 0xb5, 0x1f, 0xb1, 0x00, 0x6c, 0x81, 0xa5, 0x86, 0x1f, 0x57,
		0xd7, 0x9e, 0x08, 0xab, 0x5f, 0xda, 0xff, 0x01, 0xf8, 0x63, 0x26, 0x93,
		0x59, 0x26, 0x25, 0xba, 0x01, 0xc4, 0x35, 0xf1, 0xaf, 0x5c, 0x28, 0x0c,
		0x53, 0x15, 0xb2, 0x56, 0xe6, 0x96, 0x3a, 0x6a, 0x67, 0x2b, 0x40, 0xfe,
		0xcc, 0xbc, 0xfc, 0xae, 0xee, 0x05, 0x43, 0xad, 0x73, 0x0d, 0xf3, 0x42,
		0x0b, 0xb5, 0x04, 0x27, 0x01, 0xf2, 0x45, 0x00, 0xd1, 0x91, 0x02, 0xf5,
		0x5f, 0xc3, 0xed, 0x9d, 0x58, 0x73, 0xa2, 0x43, 0x7f, 0x86, 0x31, 0xf4,
		0x9b, 0x7e, 0x00, 0x97, 0x86, 0x1f, 0xfa, 0xbc, 0xf9, 0x3e, 0xf6, 0x6c,
		0x3a, 0x63, 0x45, 0x66, 0x39, 0x8a, 0x79, 0x14, 0x75, 0xfa, 0xaa, 0xb9,
		0x9a, 0xa4, 0x4e, 0x37, 0x23, 0x45, 0x74, 0xb4, 0x66, 0x75, 0xc1, 0xf3,
		0x0f, 0xce, 0x4a, 0xfd, 0x88, 0x82, 0x8f, 0xde, 0x2b, 0x91, 0x5c, 0x2d,
		0xed, 0xca, 0x9b, 0xdd, 0x76, 0x6f, 0x2f, 0xe7, 0xb9, 0xe2, 0x9f, 0xe9,
		0x41, 0xba, 0x1a, 0xb1, 0x9a, 0x93, 0x4b, 0xb5, 0x83, 0xa0, 0xe6, 0xa6,
		0x90, 0xe4, 0x98, 0x6b, 0xbd, 0x33, 0xe4, 0xfc, 0xee, 0x7d, 0xf0, 0xe5,
		0x52, 0xc0, 0x93, 0x4b, 0x42, 0x23, 0x08, 0xc0, 0xa9, 0xfa, 0x7a, 0xfb,
		0x6d, 0x4c, 0x00, 0x37, 0x05, 0xb1, 0x78, 0xa9, 0x08, 0x28, 0x96, 0xaa,
		0xc0, 0x9b, 0xec, 0x5e, 0x0f, 0xba, 0xbb, 0xd0, 0x4d, 0x5b, 0x09, 0x3e,
		0x64, 0xfe, 0xef, 0x91, 0x0e, 0x0e, 0xfa, 0xe4, 0xcd, 0x2f, 0x06, 0xe1,
		0xe0, 0xfe, 0x11, 0x3b, 0x58, 0x0c, 0x99, 0x5e, 0x9a, 0xe3, 0x47, 0x1c,
		0x8c, 0x87, 0xf7, 0x4e, 0xaf, 0x27, 0xbd, 0xe2, 0xaa, 0xd2, 0xfc, 0x5b,
		0x70, 0x05, 0x31, 0x70, 0xc4, 0x74, 0x5f, 0xff, 0x02, 0xa1, 0xac, 0x45,
		0x81, 0x32, 0x7e, 0x7a, 0x0a, 0xe8, 0xbd, 0x13, 0x9b, 0xdf, 0x96, 0xad,
		0x40, 0x96, 0xac, 0xdd, 0x91, 0x60, 0xef, 0xa1, 0xf1, 0x91, 0x9a, 0x08,
		0x2f, 0xcf, 0xd3, 0xa7, 0x88, 0x5d, 0xa6, 0x88, 0x93, 0x87, 0x94, 0x4d,
		0xdf, 0xb3, 0x94, 0xf5, 0xd6, 0x6c, 0x72, 0x36, 0xa5, 0x53, 0xdf, 0xc8,
		0x8c, 0x2e, 0xb8, 0x47, 0xb0, 0x5e, 0x0c, 0x41, 0xc0, 0x98, 0x23, 0x77,
		0xdc, 0xe5, 0x71, 0x5b, 0x0c, 0xe3, 0xb0, 0x95, 0xe0, 0x36, 0xc0, 0x85,
		0xfc, 0x15, 0x70, 0x75, 0xb0, 0xdd, 0xa9, 0xe0, 0x66, 0x78, 0x1b, 0x44,
		0xb4, 0x59, 0xdd, 0xc3, 0xdd, 0x3f, 0x7f, 0x80, 0xc3, 0xdc, 0xf2, 0x37,
		0x18, 0x77, 0x14, 0x9d, 0xb7, 0xff, 0x6a, 0xb2, 0x2a, 0xa4, 0xa4, 0xcd,
		0x7d, 0xf6, 0xd3, 0xf7, 0xd6, 0xe1, 0x55, 0xb2, 0xb7, 0x37, 0xa4, 0x59,
		0x90, 0xa3, 0xc8, 0xad, 0x93, 0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xb0,
		0xd4, 0x76, 0xe7, 0x57, 0x06, 0x00, 0x00,
		},
		"data/wrapper.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/wrapper.js": data_wrapper_js,

}
