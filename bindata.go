package phantomjs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_wrapper_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x84, 0x53,
		0x5d, 0x6f, 0xda, 0x40, 0x10, 0x7c, 0xcf, 0xaf, 0xd8, 0xfa, 0x21, 0xde,
		0xab, 0x2d, 0x93, 0xbe, 0x16, 0xa1, 0xa8, 0x52, 0x69, 0x45, 0x55, 0x51,
		0xa9, 0x44, 0xca, 0x03, 0x26, 0x92, 0x05, 0x4b, 0xb8, 0xea, 0x38, 0xdc,
		0xbb, 0x73, 0x08, 0xaa, 0xf8, 0xef, 0xdd, 0xf3, 0x07, 0x1c, 0x21, 0x09,
		0x20, 0x81, 0xee, 0x76, 0x66, 0x76, 0x77, 0x3c, 0xc6, 0x65, 0xa5, 0xe7,
		0x4e, 0x6e, 0x34, 0x0a, 0xf8, 0x77, 0x05, 0xf0, 0x54, 0x18, 0xb0, 0x3b,
		0xeb, 0x68, 0x0d, 0x03, 0x30, 0xf4, 0xb7, 0x92, 0x86, 0x30, 0x6e, 0x6e,
		0x62, 0xd1, 0x6f, 0x11, 0x72, 0xc1, 0xd5, 0x9b, 0xfe, 0x15, 0x1f, 0x3b,
		0x3e, 0xcc, 0x8b, 0xd2, 0x55, 0x86, 0x46, 0xba, 0xac, 0x5c, 0x2b, 0xd6,
		0x80, 0x95, 0xd4, 0x64, 0x19, 0x3f, 0x9d, 0xf5, 0xeb, 0xbb, 0x46, 0x2c,
		0xb3, 0x6e, 0xb1, 0xa9, 0x5c, 0xb6, 0x35, 0xd2, 0xd1, 0x4f, 0x86, 0x60,
		0x3c, 0xbd, 0xff, 0x32, 0xba, 0x1b, 0x8d, 0xbf, 0xcf, 0x9a, 0x46, 0x2d,
		0x9b, 0x99, 0x47, 0x86, 0xd4, 0x99, 0xa1, 0x62, 0x51, 0xe3, 0x5b, 0xd0,
		0x76, 0x25, 0x15, 0x01, 0x2a, 0xf8, 0x30, 0x18, 0x40, 0x3c, 0x1c, 0x7f,
		0x8d, 0xbb, 0xe6, 0xd0, 0xb4, 0xce, 0xca, 0xca, 0xae, 0x50, 0xb5, 0x70,
		0xb8, 0xac, 0xb8, 0xaf, 0x7f, 0xe9, 0xa9, 0x50, 0x55, 0xe1, 0x08, 0xe5,
		0x22, 0x49, 0xd2, 0x56, 0xea, 0xcf, 0x46, 0x6a, 0x8c, 0x73, 0x1d, 0x8b,
		0x1a, 0xbb, 0x3f, 0x71, 0x60, 0xb1, 0xd1, 0xf4, 0x8d, 0x0f, 0xcc, 0xe8,
		0x46, 0x30, 0xc4, 0x9e, 0xe8, 0x23, 0x04, 0x0d, 0xd9, 0x4a, 0xb9, 0x14,
		0xc8, 0x98, 0xe3, 0x98, 0x72, 0x09, 0x78, 0x72, 0x11, 0x9a, 0xc4, 0x85,
		0xc0, 0x24, 0x76, 0x3e, 0x81, 0x88, 0xbf, 0x09, 0xfc, 0x98, 0xfc, 0x1a,
		0x33, 0xc0, 0x48, 0xfd, 0x28, 0x97, 0xbb, 0x46, 0x80, 0x6b, 0xb9, 0x8e,
		0x0e, 0xab, 0xee, 0x81, 0x94, 0xa5, 0x57, 0x65, 0x4f, 0xbd, 0x7f, 0x5b,
		0xb6, 0x19, 0xf8, 0x5c, 0xb9, 0xfd, 0xb7, 0xe4, 0xee, 0xe4, 0x9a, 0x58,
		0x0d, 0xc3, 0x00, 0xa4, 0x70, 0xd3, 0x99, 0x79, 0xee, 0x53, 0xe0, 0x6c,
		0x0a, 0xd2, 0xc3, 0xc3, 0xb8, 0x78, 0x58, 0x0a, 0x85, 0x79, 0xb4, 0xef,
		0xc7, 0x25, 0x1a, 0x0f, 0xef, 0xfd, 0xbc, 0xc1, 0xe8, 0x8d, 0x56, 0x43,
		0x73, 0x66, 0x77, 0xd8, 0xdb, 0x37, 0xc4, 0xc8, 0x0b, 0xf3, 0xa3, 0x7f,
		0x09, 0x84, 0xba, 0x17, 0x17, 0xea, 0xfa, 0xf5, 0x35, 0x60, 0x70, 0xce,
		0xdc, 0x66, 0x52, 0x5b, 0x81, 0x22, 0x5b, 0x17, 0x6e, 0xbe, 0xc2, 0xde,
		0x43, 0xb7, 0x47, 0x6e, 0x13, 0xbc, 0xfd, 0x9c, 0x6f, 0x13, 0x71, 0x9b,
		0x23, 0x4e, 0x1f, 0x72, 0x31, 0xfb, 0x28, 0x72, 0xd1, 0x5b, 0x8b, 0xe9,
		0xa7, 0x19, 0x87, 0xaa, 0x54, 0xc5, 0x9c, 0xb0, 0xc7, 0xb0, 0x5e, 0x0a,
		0x51, 0x24, 0x84, 0x17, 0xf7, 0xda, 0x99, 0x2d, 0x95, 0x74, 0x18, 0xa7,
		0xf1, 0x61, 0x04, 0x9f, 0x00, 0x5f, 0x0a, 0x23, 0xe0, 0xfb, 0xe0, 0x21,
		0x53, 0xd1, 0xef, 0xe1, 0x24, 0x4a, 0x38, 0x59, 0x6f, 0x3f, 0xdc, 0x70,
		0x65, 0xff, 0x39, 0xe7, 0xd6, 0x6f, 0x3b, 0x1e, 0x25, 0xbc, 0xc8, 0xdc,
		0xaf, 0xc5, 0xf9, 0x7b, 0x16, 0x97, 0xc8, 0xba, 0x52, 0x8a, 0x93, 0xfb,
		0x1c, 0xd2, 0x4f, 0xe2, 0xf0, 0xaa, 0xd8, 0xe5, 0x84, 0x74, 0x01, 0x79,
		0x17, 0xb9, 0xf7, 0x63, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x58,
		0x30, 0xb1, 0xae, 0x04, 0x00, 0x00,
	},
		"data/wrapper.js",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"data/wrapper.js": data_wrapper_js,
}
