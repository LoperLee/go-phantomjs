package phantomjs

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_wrapper_js() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x9c, 0x56,
		0xdd, 0x52, 0xdb, 0xb8, 0x17, 0xbf, 0xcf, 0x53, 0x9c, 0x7f, 0x2e, 0x1a,
		0x99, 0xb8, 0x0e, 0xfd, 0x5f, 0xc2, 0xa6, 0xdd, 0x8f, 0xa6, 0xbb, 0xe9,
		0xb4, 0x69, 0xa7, 0x81, 0xdd, 0x0b, 0x42, 0xa7, 0xc2, 0x56, 0x12, 0x81,
		0x2d, 0xbb, 0x92, 0x4c, 0x60, 0x98, 0xbc, 0xcb, 0x3e, 0xcb, 0x3e, 0xd9,
		0x1e, 0x49, 0x96, 0xad, 0x00, 0x81, 0xce, 0xba, 0xd3, 0x60, 0x49, 0xe7,
		0xfc, 0xce, 0xf7, 0x4f, 0x1e, 0x8d, 0xe0, 0xe4, 0x8f, 0xe9, 0x1c, 0xde,
		0x4d, 0x3f, 0x4c, 0xe0, 0xe3, 0xe9, 0xfc, 0x04, 0x7e, 0x9d, 0xc0, 0x6f,
		0x9f, 0x3e, 0x7e, 0xc6, 0xf5, 0x5b, 0x38, 0x9d, 0x4f, 0x67, 0xbf, 0xf7,
		0x50, 0xe6, 0xdb, 0xaa, 0x7c, 0x79, 0xc1, 0x45, 0x46, 0x35, 0x85, 0x97,
		0xd5, 0xd5, 0x6a, 0x5c, 0xad, 0xa9, 0xd0, 0x65, 0x71, 0xa9, 0xc0, 0xec,
		0x7d, 0x33, 0x32, 0xba, 0x84, 0x0b, 0x06, 0x5c, 0xa4, 0x79, 0x9d, 0xb1,
		0x0c, 0x5f, 0x40, 0xaf, 0x19, 0x54, 0xb2, 0xbc, 0x64, 0xa9, 0xee, 0xf5,
		0xc8, 0xb2, 0x16, 0xa9, 0xe6, 0xa5, 0x20, 0x11, 0xdc, 0xf5, 0x00, 0xae,
		0xa9, 0x04, 0x75, 0xab, 0x34, 0x2b, 0x60, 0x0c, 0x92, 0x7d, 0xaf, 0xb9,
		0x64, 0x64, 0xe0, 0x76, 0x06, 0xd1, 0x71, 0x23, 0xc1, 0x33, 0x3c, 0x3d,
		0x3c, 0xee, 0xe1, 0x72, 0x74, 0x70, 0x80, 0xbf, 0x70, 0x00, 0x27, 0x6b,
		0xae, 0xa0, 0x60, 0x7a, 0x5d, 0x66, 0xa8, 0x48, 0x33, 0x50, 0x3a, 0x43,
		0x6b, 0x54, 0x64, 0xc0, 0x6e, 0xb4, 0xa4, 0xa9, 0x86, 0xb4, 0x2c, 0x0a,
		0xb3, 0x5e, 0xca, 0xb2, 0x00, 0xae, 0x13, 0xab, 0xe8, 0xb5, 0x99, 0x44,
		0x37, 0x15, 0xe8, 0x4d, 0x09, 0x57, 0x18, 0x13, 0x94, 0x4b, 0x2f, 0xaf,
		0x8e, 0x9c, 0xcc, 0xe4, 0xcf, 0x5f, 0x3e, 0x60, 0x3c, 0x57, 0x4c, 0x1c,
		0x01, 0xbb, 0xa6, 0x79, 0x4d, 0x35, 0x03, 0x9a, 0xe7, 0x36, 0xa2, 0xba,
		0x42, 0x69, 0x2e, 0x56, 0x90, 0x73, 0xc1, 0x14, 0x2e, 0x4d, 0xe4, 0xe6,
		0x60, 0x32, 0x7b, 0xeb, 0x94, 0x9c, 0x39, 0xf8, 0x72, 0x3a, 0xf3, 0x20,
		0xb2, 0x76, 0xd9, 0xf0, 0x39, 0x40, 0x83, 0x42, 0x53, 0xd4, 0x6f, 0xf3,
		0xb4, 0x8b, 0x1a, 0xef, 0x87, 0x75, 0xd8, 0x73, 0x5a, 0x54, 0x39, 0x6b,
		0xfd, 0x76, 0x9b, 0x2f, 0x77, 0x9f, 0x20, 0x5b, 0x3e, 0x1f, 0xec, 0x86,
		0x6b, 0xe5, 0xb2, 0xf2, 0xd9, 0x55, 0xf0, 0xfd, 0xdc, 0x89, 0xbd, 0xb6,
		0x41, 0xfb, 0xf7, 0xa6, 0xbc, 0x89, 0x91, 0x27, 0xb6, 0x18, 0x4e, 0x64,
		0xf6, 0x76, 0x27, 0x93, 0x01, 0xb2, 0x64, 0xba, 0x96, 0x42, 0xc1, 0xff,
		0xbd, 0x2c, 0x46, 0xef, 0x5f, 0xef, 0x55, 0xde, 0xee, 0xe1, 0xe3, 0x54,
		0x3a, 0x8d, 0xed, 0x8f, 0xdb, 0xb1, 0x89, 0x51, 0x9a, 0xea, 0xda, 0x9c,
		0x64, 0xcc, 0xd4, 0x90, 0x42, 0x45, 0x57, 0x0c, 0xf2, 0x92, 0x66, 0x4f,
		0xf9, 0x90, 0x95, 0x82, 0xed, 0xf8, 0x61, 0xda, 0xcc, 0x6a, 0x06, 0x6d,
		0x68, 0xd6, 0x83, 0xa8, 0x93, 0x31, 0xeb, 0xa4, 0xac, 0x98, 0x20, 0x83,
		0xb5, 0xd6, 0xd5, 0xd1, 0x68, 0xb4, 0xd9, 0x6c, 0x30, 0x3b, 0xb6, 0x0a,
		0x09, 0xfa, 0x36, 0x88, 0x3b, 0x0b, 0xce, 0xaf, 0xe8, 0x9f, 0xbf, 0xc3,
		0x60, 0xc1, 0xd8, 0xf5, 0x47, 0xc7, 0xdd, 0xc1, 0xb6, 0x5b, 0x6c, 0xef,
		0x87, 0x3f, 0xc2, 0xdf, 0xae, 0x63, 0x68, 0x85, 0x91, 0xb3, 0xa9, 0xa8,
		0x6a, 0xed, 0x13, 0x69, 0x7d, 0x77, 0x6d, 0x38, 0x86, 0xb3, 0xf3, 0xe3,
		0x6e, 0x0f, 0xd7, 0x6e, 0x94, 0x12, 0x3b, 0x1c, 0x89, 0x99, 0x93, 0x0f,
		0x28, 0xd8, 0x14, 0x13, 0x36, 0x6b, 0x8e, 0xed, 0x43, 0x72, 0xf8, 0xdf,
		0x78, 0x0c, 0x03, 0x34, 0x38, 0xf0, 0x90, 0xe0, 0x00, 0x93, 0xaa, 0x56,
		0x6b, 0x92, 0x37, 0xe2, 0xf0, 0x3c, 0xe2, 0xb6, 0x35, 0xee, 0x4b, 0x35,
		0x6e, 0x90, 0x54, 0x95, 0xf3, 0x94, 0x91, 0xc3, 0x18, 0x5e, 0x45, 0x67,
		0x87, 0x8d, 0x97, 0x7c, 0x09, 0xa4, 0x15, 0xb4, 0x3e, 0x60, 0xfb, 0x05,
		0x4e, 0x68, 0x79, 0xdb, 0xbe, 0x83, 0x1d, 0xc2, 0x24, 0xc5, 0x09, 0x24,
		0x1a, 0x9b, 0x21, 0x6e, 0x80, 0x2f, 0x4b, 0x8e, 0x05, 0x59, 0x88, 0x41,
		0xd4, 0xba, 0xb9, 0xc5, 0x3c, 0xe9, 0x74, 0x0d, 0x84, 0xdd, 0x44, 0x81,
		0x7e, 0xe7, 0x79, 0x59, 0xeb, 0x64, 0x23, 0xb9, 0x66, 0xd6, 0xf7, 0xfe,
		0x44, 0xca, 0x52, 0x42, 0x56, 0x4b, 0x33, 0x7a, 0x76, 0xec, 0xcb, 0x65,
		0x1f, 0x86, 0x4f, 0x18, 0x68, 0xfe, 0x2a, 0xa6, 0x4f, 0x78, 0xc1, 0x10,
		0x8e, 0x84, 0x95, 0x89, 0xe1, 0xd0, 0xe7, 0x03, 0x58, 0xae, 0xd8, 0xc3,
		0x38, 0xb1, 0x27, 0x83, 0x30, 0x3d, 0xbb, 0x10, 0x9e, 0x0d, 0x87, 0x7b,
		0xe3, 0x6a, 0xb0, 0xbc, 0xd2, 0xde, 0x68, 0xa6, 0x02, 0xe1, 0x90, 0x32,
		0x1b, 0x83, 0x47, 0x3f, 0x99, 0x50, 0x9a, 0xc5, 0xb0, 0xff, 0xba, 0xdf,
		0x46, 0xf1, 0xbc, 0xf7, 0x3d, 0xf3, 0x3f, 0x64, 0xdd, 0x89, 0xe7, 0x41,
		0x33, 0x7a, 0x2b, 0x7e, 0xcd, 0x04, 0x52, 0x97, 0xd5, 0xa1, 0x38, 0x89,
		0x36, 0x7f, 0x92, 0x55, 0x92, 0x29, 0x26, 0xb4, 0x59, 0xd0, 0xae, 0x75,
		0x33, 0x96, 0xe6, 0x54, 0x52, 0xf3, 0x7e, 0x8f, 0x89, 0x51, 0x45, 0xd5,
		0xb9, 0x06, 0xac, 0x01, 0xb3, 0x95, 0xc0, 0x39, 0xde, 0xe1, 0xc9, 0x0d,
		0x47, 0xd6, 0xbd, 0xf0, 0x06, 0x91, 0x11, 0x03, 0x58, 0xbc, 0x5a, 0xb2,
		0x3a, 0x65, 0xcd, 0xb4, 0x5f, 0xdc, 0xda, 0x11, 0x7b, 0x87, 0xa7, 0x98,
		0xcc, 0x08, 0x95, 0xf2, 0x72, 0x13, 0x9a, 0xe3, 0xf7, 0xa0, 0xd7, 0x54,
		0x59, 0xce, 0x90, 0x14, 0xef, 0x12, 0x26, 0x63, 0x30, 0xad, 0xd5, 0xad,
		0x5b, 0xd3, 0x98, 0x2b, 0x4f, 0xc5, 0xa1, 0x01, 0x07, 0x5a, 0xb0, 0xe2,
		0x82, 0xc9, 0x04, 0xa6, 0x4b, 0x10, 0xa5, 0x8e, 0xad, 0x94, 0xa3, 0x28,
		0xa4, 0x76, 0x93, 0x31, 0xd6, 0xe2, 0x54, 0x54, 0x29, 0xdc, 0x44, 0xa8,
		0x1d, 0x3f, 0x1b, 0x84, 0xc0, 0xd1, 0x9f, 0xad, 0x0f, 0x00, 0x77, 0x2e,
		0xad, 0x5b, 0x73, 0x09, 0xe2, 0x53, 0x0b, 0xfe, 0x1d, 0xe1, 0x78, 0x66,
		0x12, 0xbc, 0xe4, 0xe8, 0xe1, 0x12, 0x13, 0x66, 0x0c, 0xa6, 0xb5, 0x94,
		0xb8, 0x69, 0x6e, 0x99, 0x7d, 0x08, 0xa6, 0x52, 0xa0, 0xca, 0x5a, 0xa6,
		0x2c, 0x20, 0x4c, 0x9f, 0x8b, 0x87, 0x6c, 0x13, 0xf4, 0x65, 0xec, 0xb4,
		0x43, 0xca, 0x31, 0x62, 0x58, 0x77, 0xb9, 0x52, 0xae, 0x5b, 0xf0, 0xf6,
		0xdf, 0xdb, 0x93, 0xb3, 0xc9, 0x5f, 0xa6, 0x0b, 0x31, 0x86, 0x21, 0xf4,
		0xf1, 0x1f, 0x34, 0x1d, 0x16, 0x0e, 0xb8, 0xb1, 0x46, 0xfa, 0x06, 0x15,
		0x49, 0xc3, 0x4a, 0x5b, 0x8b, 0xbe, 0x5b, 0x8d, 0x21, 0x3c, 0xb0, 0xe7,
		0x2f, 0x5e, 0x00, 0x09, 0xd6, 0x89, 0x2e, 0xe7, 0x36, 0x46, 0x12, 0x25,
		0x85, 0x99, 0x7c, 0x32, 0xfa, 0xea, 0x83, 0x58, 0xa8, 0x21, 0x79, 0x73,
		0xb4, 0xd8, 0x0c, 0xa3, 0x37, 0x0b, 0x42, 0xce, 0xbe, 0x2e, 0xa2, 0xf3,
		0x83, 0x68, 0x11, 0x8d, 0x8a, 0xe8, 0xec, 0xd5, 0x39, 0xf2, 0x57, 0x95,
		0x53, 0xa4, 0xa5, 0x11, 0x8a, 0x8d, 0x62, 0xe8, 0xf7, 0xa3, 0xc8, 0x80,
		0x1b, 0x6c, 0xcb, 0x58, 0x9a, 0x0c, 0xe2, 0x41, 0xeb, 0x82, 0x19, 0x63,
		0x73, 0x14, 0x92, 0x8a, 0xb1, 0x43, 0xda, 0x5a, 0xf6, 0xbf, 0x4c, 0xe6,
		0xfd, 0x21, 0x56, 0x34, 0xe0, 0xa2, 0x9d, 0xa9, 0xbd, 0xcf, 0x69, 0x00,
		0x0f, 0x75, 0xed, 0x47, 0x12, 0xe9, 0x20, 0xf6, 0x12, 0xda, 0xa3, 0xca,
		0xa2, 0xce, 0xf3, 0x18, 0xef, 0xf8, 0x50, 0x7d, 0x87, 0xb6, 0x1e, 0x05,
		0xfb, 0x0f, 0x5c, 0xf0, 0x85, 0x61, 0xce, 0xd9, 0x35, 0x7e, 0x13, 0xc1,
		0x46, 0xd2, 0xaa, 0x62, 0xb2, 0xeb, 0x1c, 0xbd, 0xa6, 0xf8, 0xfd, 0x45,
		0x45, 0xd0, 0xf2, 0xd4, 0x8f, 0xb9, 0x21, 0x41, 0x3c, 0xb1, 0xa3, 0xfe,
		0x5c, 0xc7, 0x37, 0x7d, 0x7e, 0xbb, 0xd3, 0xe1, 0x0d, 0x97, 0x35, 0x5a,
		0xcd, 0xb7, 0xc0, 0x9d, 0xb7, 0xbd, 0x85, 0x90, 0x1e, 0xac, 0x23, 0x34,
		0x4d, 0x59, 0xa5, 0x1f, 0xf7, 0xa0, 0x9b, 0xf5, 0x87, 0xfd, 0xbf, 0x33,
		0xa2, 0x2e, 0x53, 0x8d, 0xb5, 0x56, 0x84, 0x38, 0xc8, 0xd8, 0x80, 0x75,
		0xd9, 0x34, 0x8d, 0xb2, 0xb3, 0x11, 0xd2, 0x35, 0x1e, 0x04, 0xa3, 0xd1,
		0x8e, 0xc4, 0x10, 0xde, 0xcf, 0x3f, 0xcd, 0x12, 0x17, 0x3c, 0x86, 0xec,
		0x00, 0xf0, 0x6c, 0x21, 0xfa, 0xfb, 0xbb, 0x69, 0xdf, 0xc4, 0xed, 0x87,
		0x75, 0x0e, 0x3f, 0x44, 0xfe, 0xe1, 0x46, 0x38, 0xf6, 0x9d, 0xf0, 0xa4,
		0xe8, 0xd6, 0x34, 0xf0, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x32, 0x6e,
		0xce, 0x20, 0x59, 0x0c, 0x00, 0x00,
		},
		"data/wrapper.js",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/wrapper.js": data_wrapper_js,

}
